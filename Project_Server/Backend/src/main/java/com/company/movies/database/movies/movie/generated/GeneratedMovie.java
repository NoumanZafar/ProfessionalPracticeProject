package com.company.movies.database.movies.movie.generated;

import com.company.movies.database.movies.director.Director;
import com.company.movies.database.movies.movie.Movie;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ReferenceField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.largeobject.BlobToByteArrayMapper;
import java.sql.Blob;
import java.sql.Date;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.movies.database.movies.movie.Movie}-interface representing
 * entities of the {@code movie}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovie {
    
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieId()} method.
     */
    StringField<Movie, String> MOVIE_ID = StringField.create(
        Identifier.MOVIE_ID,
        Movie::getMovieId,
        Movie::setMovieId,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieTitle()} method.
     */
    StringField<Movie, String> MOVIE_TITLE = StringField.create(
        Identifier.MOVIE_TITLE,
        Movie::getMovieTitle,
        Movie::setMovieTitle,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieDesc()} method.
     */
    StringField<Movie, String> MOVIE_DESC = StringField.create(
        Identifier.MOVIE_DESC,
        o -> OptionalUtil.unwrap(o.getMovieDesc()),
        Movie::setMovieDesc,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieImg()} method.
     */
    ReferenceField<Movie, Blob, byte[]> MOVIE_IMG = ReferenceField.create(
        Identifier.MOVIE_IMG,
        o -> OptionalUtil.unwrap(o.getMovieImg()),
        Movie::setMovieImg,
        new BlobToByteArrayMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getTrailer()} method.
     */
    ReferenceField<Movie, Blob, byte[]> TRAILER = ReferenceField.create(
        Identifier.TRAILER,
        o -> OptionalUtil.unwrap(o.getTrailer()),
        Movie::setTrailer,
        new BlobToByteArrayMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getYearofrelease()} method.
     */
    ComparableField<Movie, Date, Date> YEAROFRELEASE = ComparableField.create(
        Identifier.YEAROFRELEASE,
        o -> OptionalUtil.unwrap(o.getYearofrelease()),
        Movie::setYearofrelease,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getDirectorId()} method.
     */
    StringForeignKeyField<Movie, String, Director> DIRECTOR_ID = StringForeignKeyField.create(
        Identifier.DIRECTOR_ID,
        Movie::getDirectorId,
        Movie::setDirectorId,
        Director.DIRECTOR_ID,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the movieId of this Movie. The movieId field corresponds to the
     * database column database.movies.movie.MOVIE_ID.
     * 
     * @return the movieId of this Movie
     */
    String getMovieId();
    
    /**
     * Returns the movieTitle of this Movie. The movieTitle field corresponds to
     * the database column database.movies.movie.MOVIE_TITLE.
     * 
     * @return the movieTitle of this Movie
     */
    String getMovieTitle();
    
    /**
     * Returns the movieDesc of this Movie. The movieDesc field corresponds to
     * the database column database.movies.movie.MOVIE_DESC.
     * 
     * @return the movieDesc of this Movie
     */
    Optional<String> getMovieDesc();
    
    /**
     * Returns the movieImg of this Movie. The movieImg field corresponds to the
     * database column database.movies.movie.MOVIE_IMG.
     * 
     * @return the movieImg of this Movie
     */
    Optional<byte[]> getMovieImg();
    
    /**
     * Returns the trailer of this Movie. The trailer field corresponds to the
     * database column database.movies.movie.TRAILER.
     * 
     * @return the trailer of this Movie
     */
    Optional<byte[]> getTrailer();
    
    /**
     * Returns the yearofrelease of this Movie. The yearofrelease field
     * corresponds to the database column database.movies.movie.YEAROFRELEASE.
     * 
     * @return the yearofrelease of this Movie
     */
    Optional<Date> getYearofrelease();
    
    /**
     * Returns the directorId of this Movie. The directorId field corresponds to
     * the database column database.movies.movie.DIRECTOR_ID.
     * 
     * @return the directorId of this Movie
     */
    String getDirectorId();
    
    /**
     * Sets the movieId of this Movie. The movieId field corresponds to the
     * database column database.movies.movie.MOVIE_ID.
     * 
     * @param movieId to set of this Movie
     * @return        this Movie instance
     */
    Movie setMovieId(String movieId);
    
    /**
     * Sets the movieTitle of this Movie. The movieTitle field corresponds to
     * the database column database.movies.movie.MOVIE_TITLE.
     * 
     * @param movieTitle to set of this Movie
     * @return           this Movie instance
     */
    Movie setMovieTitle(String movieTitle);
    
    /**
     * Sets the movieDesc of this Movie. The movieDesc field corresponds to the
     * database column database.movies.movie.MOVIE_DESC.
     * 
     * @param movieDesc to set of this Movie
     * @return          this Movie instance
     */
    Movie setMovieDesc(String movieDesc);
    
    /**
     * Sets the movieImg of this Movie. The movieImg field corresponds to the
     * database column database.movies.movie.MOVIE_IMG.
     * 
     * @param movieImg to set of this Movie
     * @return         this Movie instance
     */
    Movie setMovieImg(byte[] movieImg);
    
    /**
     * Sets the trailer of this Movie. The trailer field corresponds to the
     * database column database.movies.movie.TRAILER.
     * 
     * @param trailer to set of this Movie
     * @return        this Movie instance
     */
    Movie setTrailer(byte[] trailer);
    
    /**
     * Sets the yearofrelease of this Movie. The yearofrelease field corresponds
     * to the database column database.movies.movie.YEAROFRELEASE.
     * 
     * @param yearofrelease to set of this Movie
     * @return              this Movie instance
     */
    Movie setYearofrelease(Date yearofrelease);
    
    /**
     * Sets the directorId of this Movie. The directorId field corresponds to
     * the database column database.movies.movie.DIRECTOR_ID.
     * 
     * @param directorId to set of this Movie
     * @return           this Movie instance
     */
    Movie setDirectorId(String directorId);
    
    /**
     * Queries the specified manager for the referenced Director. If no such
     * Director exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Director findDirectorId(Manager<Director> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Movie> {
        
        MOVIE_ID      ("MOVIE_ID"),
        MOVIE_TITLE   ("MOVIE_TITLE"),
        MOVIE_DESC    ("MOVIE_DESC"),
        MOVIE_IMG     ("MOVIE_IMG"),
        TRAILER       ("TRAILER"),
        YEAROFRELEASE ("YEAROFRELEASE"),
        DIRECTOR_ID   ("DIRECTOR_ID");
        
        private final String columnName;
        private final TableIdentifier<Movie> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "database";
        }
        
        @Override
        public String getSchemaName() {
            return "movies";
        }
        
        @Override
        public String getTableName() {
            return "movie";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Movie> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}