package com.company.movies.database.movies.movie.generated;

import com.company.movies.database.movies.director.Director;
import com.company.movies.database.movies.movie.Movie;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.movies.database.movies.movie.Movie}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieImpl implements Movie {
    
    private String movieId;
    private String movieTitle;
    private String movieDesc;
    private byte[] movieImg;
    private byte[] trailer;
    private String yearofrelease;
    private String directorId;
    
    protected GeneratedMovieImpl() {
        
    }
    
    @Override
    public String getMovieId() {
        return movieId;
    }
    
    @Override
    public String getMovieTitle() {
        return movieTitle;
    }
    
    @Override
    public Optional<String> getMovieDesc() {
        return Optional.ofNullable(movieDesc);
    }
    
    @Override
    public Optional<byte[]> getMovieImg() {
        return Optional.ofNullable(movieImg);
    }
    
    @Override
    public Optional<byte[]> getTrailer() {
        return Optional.ofNullable(trailer);
    }
    
    @Override
    public Optional<String> getYearofrelease() {
        return Optional.ofNullable(yearofrelease);
    }
    
    @Override
    public String getDirectorId() {
        return directorId;
    }
    
    @Override
    public Movie setMovieId(String movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public Movie setMovieTitle(String movieTitle) {
        this.movieTitle = movieTitle;
        return this;
    }
    
    @Override
    public Movie setMovieDesc(String movieDesc) {
        this.movieDesc = movieDesc;
        return this;
    }
    
    @Override
    public Movie setMovieImg(byte[] movieImg) {
        this.movieImg = movieImg;
        return this;
    }
    
    @Override
    public Movie setTrailer(byte[] trailer) {
        this.trailer = trailer;
        return this;
    }
    
    @Override
    public Movie setYearofrelease(String yearofrelease) {
        this.yearofrelease = yearofrelease;
        return this;
    }
    
    @Override
    public Movie setDirectorId(String directorId) {
        this.directorId = directorId;
        return this;
    }
    
    @Override
    public Director findDirectorId(Manager<Director> foreignManager) {
        return foreignManager.stream().filter(Director.DIRECTOR_ID.equal(getDirectorId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("movieId = "       + Objects.toString(getMovieId()));
        sj.add("movieTitle = "    + Objects.toString(getMovieTitle()));
        sj.add("movieDesc = "     + Objects.toString(OptionalUtil.unwrap(getMovieDesc())));
        sj.add("movieImg = "      + Objects.toString(OptionalUtil.unwrap(getMovieImg())));
        sj.add("trailer = "       + Objects.toString(OptionalUtil.unwrap(getTrailer())));
        sj.add("yearofrelease = " + Objects.toString(OptionalUtil.unwrap(getYearofrelease())));
        sj.add("directorId = "    + Objects.toString(getDirectorId()));
        return "MovieImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Movie)) { return false; }
        final Movie thatMovie = (Movie)that;
        if (!Objects.equals(this.getMovieId(), thatMovie.getMovieId())) {return false; }
        if (!Objects.equals(this.getMovieTitle(), thatMovie.getMovieTitle())) {return false; }
        if (!Objects.equals(this.getMovieDesc(), thatMovie.getMovieDesc())) {return false; }
        if (!Objects.equals(this.getMovieImg(), thatMovie.getMovieImg())) {return false; }
        if (!Objects.equals(this.getTrailer(), thatMovie.getTrailer())) {return false; }
        if (!Objects.equals(this.getYearofrelease(), thatMovie.getYearofrelease())) {return false; }
        if (!Objects.equals(this.getDirectorId(), thatMovie.getDirectorId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getMovieId());
        hash = 31 * hash + Objects.hashCode(getMovieTitle());
        hash = 31 * hash + Objects.hashCode(getMovieDesc());
        hash = 31 * hash + Objects.hashCode(getMovieImg());
        hash = 31 * hash + Objects.hashCode(getTrailer());
        hash = 31 * hash + Objects.hashCode(getYearofrelease());
        hash = 31 * hash + Objects.hashCode(getDirectorId());
        return hash;
    }
}