package com.company.movies.generated;

import com.company.movies.MoviesApplication;
import com.company.movies.MoviesApplicationBuilder;
import com.company.movies.MoviesApplicationImpl;
import com.company.movies.database.movies.actor.ActorManagerImpl;
import com.company.movies.database.movies.actor.ActorSqlAdapter;
import com.company.movies.database.movies.director.DirectorManagerImpl;
import com.company.movies.database.movies.director.DirectorSqlAdapter;
import com.company.movies.database.movies.genre.GenreManagerImpl;
import com.company.movies.database.movies.genre.GenreSqlAdapter;
import com.company.movies.database.movies.movie.MovieManagerImpl;
import com.company.movies.database.movies.movie.MovieSqlAdapter;
import com.company.movies.database.movies.movie_actor.MovieActorManagerImpl;
import com.company.movies.database.movies.movie_actor.MovieActorSqlAdapter;
import com.company.movies.database.movies.movie_genre.MovieGenreManagerImpl;
import com.company.movies.database.movies.movie_genre.MovieGenreSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.core.internal.AbstractApplicationBuilder;

/**
 * A generated base {@link
 * com.speedment.runtime.core.internal.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named movies.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMoviesApplicationBuilder extends AbstractApplicationBuilder<MoviesApplication, MoviesApplicationBuilder> {
    
    protected GeneratedMoviesApplicationBuilder() {
        super(MoviesApplicationImpl.class, GeneratedMoviesMetadata.class);
        withManager(ActorManagerImpl.class);
        withManager(DirectorManagerImpl.class);
        withManager(GenreManagerImpl.class);
        withManager(MovieManagerImpl.class);
        withManager(MovieActorManagerImpl.class);
        withManager(MovieGenreManagerImpl.class);
        withComponent(ActorSqlAdapter.class);
        withComponent(DirectorSqlAdapter.class);
        withComponent(GenreSqlAdapter.class);
        withComponent(MovieSqlAdapter.class);
        withComponent(MovieActorSqlAdapter.class);
        withComponent(MovieGenreSqlAdapter.class);
    }
    
    @Override
    public MoviesApplication build(Injector injector) {
        return injector.getOrThrow(MoviesApplication.class);
    }
}