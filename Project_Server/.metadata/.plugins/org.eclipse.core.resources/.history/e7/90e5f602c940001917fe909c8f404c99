package com.company.movies.movies.movies.movie_actor.generated;

import com.company.movies.movies.movies.actor.Actor;
import com.company.movies.movies.movies.movie.Movie;
import com.company.movies.movies.movies.movie_actor.MovieActor;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.movies.movies.movies.movie_actor.MovieActor}-interface
 * representing entities of the {@code movie_actor}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieActor {
    
    /**
     * This Field corresponds to the {@link MovieActor} field that can be
     * obtained using the {@link MovieActor#getActorId()} method.
     */
    StringForeignKeyField<MovieActor, String, Actor> ACTOR_ID = StringForeignKeyField.create(
        Identifier.ACTOR_ID,
        MovieActor::getActorId,
        MovieActor::setActorId,
        Actor.ACTOR_ID,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link MovieActor} field that can be
     * obtained using the {@link MovieActor#getMovieId()} method.
     */
    StringForeignKeyField<MovieActor, String, Movie> MOVIE_ID = StringForeignKeyField.create(
        Identifier.MOVIE_ID,
        MovieActor::getMovieId,
        MovieActor::setMovieId,
        Movie.MOVIE_ID,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the actorId of this MovieActor. The actorId field corresponds to
     * the database column movies.movies.movie_actor.ACTOR_ID.
     * 
     * @return the actorId of this MovieActor
     */
    String getActorId();
    
    /**
     * Returns the movieId of this MovieActor. The movieId field corresponds to
     * the database column movies.movies.movie_actor.MOVIE_ID.
     * 
     * @return the movieId of this MovieActor
     */
    String getMovieId();
    
    /**
     * Sets the actorId of this MovieActor. The actorId field corresponds to the
     * database column movies.movies.movie_actor.ACTOR_ID.
     * 
     * @param actorId to set of this MovieActor
     * @return        this MovieActor instance
     */
    MovieActor setActorId(String actorId);
    
    /**
     * Sets the movieId of this MovieActor. The movieId field corresponds to the
     * database column movies.movies.movie_actor.MOVIE_ID.
     * 
     * @param movieId to set of this MovieActor
     * @return        this MovieActor instance
     */
    MovieActor setMovieId(String movieId);
    
    /**
     * Queries the specified manager for the referenced Actor. If no such Actor
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Actor findActorId(Manager<Actor> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Movie. If no such Movie
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Movie findMovieId(Manager<Movie> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MovieActor> {
        
        ACTOR_ID ("ACTOR_ID"),
        MOVIE_ID ("MOVIE_ID");
        
        private final String columnName;
        private final TableIdentifier<MovieActor> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "movies";
        }
        
        @Override
        public String getSchemaName() {
            return "movies";
        }
        
        @Override
        public String getTableName() {
            return "movie_actor";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<MovieActor> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}