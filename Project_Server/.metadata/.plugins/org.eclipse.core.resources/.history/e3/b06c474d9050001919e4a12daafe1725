package com.gmit.backend;

import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.company.movies.MoviesApplication;
import com.company.movies.database.movies.actor.Actor;
import com.company.movies.database.movies.actor.ActorImpl;
import com.company.movies.database.movies.actor.ActorManager;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.speedment.runtime.core.exception.SpeedmentException;

/**
 * This class is a REST Controller which allows to connect to databases table
 * called Actor.
 * 
 * @author Nouman
 * @version 1.0
 * @since 1.8
 *
 */
@RestController
@RequestMapping("/actors")
/**
 * Allow the browser to get the requests from different platforms and pass the
 * requests on.
 *
 */
@CrossOrigin("*")
public class Actors {
	/**
	 * Manager of the table called Actor.
	 */
	private ActorManager actors;

	/**
	 * Connect to the table using Database interface {@link MoviesApplication}
	 * 
	 * @param app {@link MoviesApplication}
	 */
	public Actors(MoviesApplication app) {
		actors = app.getOrThrow(ActorManager.class);
	}

	/**
	 * This method produce a GET request and fetch all the data from Actor table and
	 * add that data into list. to access the data use the path provided
	 * /actors/list
	 * 
	 * @return list of actors fetched from database table.
	 */
	@RequestMapping(value = "list", method = RequestMethod.GET)
	public List<Actor> getActors() {
		return actors.stream().collect(Collectors.toList());
	}

	@RequestMapping(value = "insert", method = RequestMethod.POST)
	public void insertActor(@RequestBody String jsonData) {
		try {
			ObjectMapper mapper = new ObjectMapper();
			JsonNode jsonObject = mapper.readTree(jsonData);
			actors.persist(new ActorImpl().setActorId(jsonObject.findValue("actorID").asText())

					.setFirstName(jsonObject.findValue("actorFName").asText())

					.setSurname(jsonObject.findValue("actorSurname").asText())

					.setPicture(generateImageBytes(jsonObject.findValue("actorImage").asText())));
		} catch (final SpeedmentException | IOException ex) {
			ex.printStackTrace();
		}
	}

	public byte[] generateImageBytes(String base64String) throws IOException {
		return Base64.getMimeDecoder().decode(base64String);
	}
}
