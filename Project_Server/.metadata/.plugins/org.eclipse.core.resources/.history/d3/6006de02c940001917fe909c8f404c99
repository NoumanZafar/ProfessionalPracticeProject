package com.company.movies.movies.movies.movie_genre.generated;

import com.company.movies.movies.movies.genre.Genre;
import com.company.movies.movies.movies.movie.Movie;
import com.company.movies.movies.movies.movie_genre.MovieGenre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.movies.movies.movies.movie_genre.MovieGenre}-interface
 * representing entities of the {@code movie_genre}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieGenre {
    
    /**
     * This Field corresponds to the {@link MovieGenre} field that can be
     * obtained using the {@link MovieGenre#getMovieId()} method.
     */
    StringForeignKeyField<MovieGenre, String, Movie> MOVIE_ID = StringForeignKeyField.create(
        Identifier.MOVIE_ID,
        MovieGenre::getMovieId,
        MovieGenre::setMovieId,
        Movie.MOVIE_ID,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link MovieGenre} field that can be
     * obtained using the {@link MovieGenre#getGenreId()} method.
     */
    StringForeignKeyField<MovieGenre, String, Genre> GENRE_ID = StringForeignKeyField.create(
        Identifier.GENRE_ID,
        MovieGenre::getGenreId,
        MovieGenre::setGenreId,
        Genre.GENRE_ID,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the movieId of this MovieGenre. The movieId field corresponds to
     * the database column movies.movies.movie_genre.MOVIE_ID.
     * 
     * @return the movieId of this MovieGenre
     */
    String getMovieId();
    
    /**
     * Returns the genreId of this MovieGenre. The genreId field corresponds to
     * the database column movies.movies.movie_genre.GENRE_ID.
     * 
     * @return the genreId of this MovieGenre
     */
    String getGenreId();
    
    /**
     * Sets the movieId of this MovieGenre. The movieId field corresponds to the
     * database column movies.movies.movie_genre.MOVIE_ID.
     * 
     * @param movieId to set of this MovieGenre
     * @return        this MovieGenre instance
     */
    MovieGenre setMovieId(String movieId);
    
    /**
     * Sets the genreId of this MovieGenre. The genreId field corresponds to the
     * database column movies.movies.movie_genre.GENRE_ID.
     * 
     * @param genreId to set of this MovieGenre
     * @return        this MovieGenre instance
     */
    MovieGenre setGenreId(String genreId);
    
    /**
     * Queries the specified manager for the referenced Movie. If no such Movie
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Movie findMovieId(Manager<Movie> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Genre. If no such Genre
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Genre findGenreId(Manager<Genre> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MovieGenre> {
        
        MOVIE_ID ("MOVIE_ID"),
        GENRE_ID ("GENRE_ID");
        
        private final String columnName;
        private final TableIdentifier<MovieGenre> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "movies";
        }
        
        @Override
        public String getSchemaName() {
            return "movies";
        }
        
        @Override
        public String getTableName() {
            return "movie_genre";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<MovieGenre> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}